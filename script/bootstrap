#!/usr/bin/env bash

##
# Bootstrap the installation and configuration.
#
# @author   Ren√© Milzarek <rene.milzarek@gmail.com>
# @ref      Zach Holman (https://github.com/holman/dotfiles)  
# @license  MIT license (https://github.com/neotreat/dotfiles/blob/master/LICENSE.md)
##

set -e

# Root directory of the dotfiles
cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

# Logging configuration
LOG_ENABLED=true
LOG_FILE="/tmp/dotfiles-bootstrap.log"

# Log a message to the terminal and optionally, if configured in the $LOG_ENABLED
# variable, also create a local log file in $LOG_FILE.
#
# $1  the message to be logged
# $2  the log level (default=info, success, warn, fail)
function log {

  # Current timestamp
  timestamp=`date +%Y-%m-%d\ %H:%M:%S`

  # Log level in color
  level="[ \033[00;34m..\033[0m ]"
  
  case "$2" in
    success)
      level="[ \033[00;32mOK\033[0m ]"
      ;;
    input)
      level="[ \033[0;34m??\033[0m ]"
      ;;
    warn)
      level="[ \033[0;33mWARN\033[0m ]"
      ;;
    fail)
      level="[ \033[0;31mFAIL\033[0m ]"
      ;;
  esac

  if [ $LOG_ENABLED = true ]; then
      printf "\r $timestamp $level \t %s \n" "$1" | tee $LOG_FILE
  else
      printf "\r $timestamp $level \t %s \n" "$1"
  fi
}

# Wrapper around the log method.
#
# $1  the log messages
function logWrapper {
  while read data; do
    log "- $data"
  done
}

# Configure the git author.
function setup_gitconfig {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    log "Setup gitconfig"

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    log "- What is your git author name?" input
    read -e git_authorname
    log "- What is your git author email?" input
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    log 'Gitconfig' success
  fi
}

# Helper function to create symlinks without automatically overwriting existing
# configuration files.
function link_file {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then
      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then
        skip=true;
      else
        log "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?" input
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      log "Removed $dst" success
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      log "Moved $dst to ${dst}.backup" success
    fi

    if [ "$skip" == "true" ]
    then
      log "Skipped $src" success
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    log "Linked $1 to $2" success
  fi
}

# Install the dotfiles by symlinking.
function install_dotfiles {
  log 'Installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

# Install Homebrew on a Mac.
function install_homebrew {
  if [ "$(uname -s)" == "Darwin" ]
  then
    log "Installing dependencies"
    if source bin/dot 2>/dev/null | logWrapper
    then
      log "Dependencies installed" success
    else
      log "Error installing dependencies" fail
    fi
  fi
}

# Run the functions
setup_gitconfig
install_dotfiles
install_homebrew
